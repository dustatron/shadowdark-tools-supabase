{
  "permissions": {
    "allow": [
      "mcp__supabase__list_projects",
      "mcp__supabase__list_tables",
      "mcp__supabase__list_migrations",
      "mcp__supabase__apply_migration",
      "Bash(for:*)",
      "Bash(done)",
      "Bash(cat:*)",
      "Bash(do [ -f \"$file\" ])",
      "Bash(ls:*)",
      "mcp__supabase__execute_sql",
      "Bash(npx supabase db execute:*)",
      "Bash(PGPASSWORD='gkNQ#w@WsU1QN3TJRE#SG^x9w' psql:*)",
      "mcp__playwright__browser_navigate",
      "mcp__playwright__browser_wait_for",
      "mcp__playwright__browser_snapshot",
      "Bash(split:*)",
      "Read(//private/tmp/**)",
      "Bash(do cat \"$file\")",
      "Bash(node:*)",
      "Bash(do)",
      "Bash(wc:*)",
      "Bash(supabase db execute:*)",
      "Bash(supabase link:*)",
      "Bash(supabase db push:*)",
      "Bash(do echo \"=== Processing $file ===\" cat \"$file\" echo \"\" done)",
      "Bash(chmod:*)",
      "Bash(/tmp/apply_all_monsters.sh:*)",
      "Bash(git rev-parse:*)",
      "WebFetch(domain:mantine.dev)",
      "Bash(mkdir:*)",
      "Bash(npm run build)",
      "Bash(npm run format)",
      "Bash(mv:*)",
      "Bash(npm install:*)",
      "Bash(npx husky init:*)",
      "Bash(git add:*)",
      "Bash(git commit:*)",
      "mcp__playwright__browser_click",
      "mcp__playwright__browser_take_screenshot",
      "mcp__playwright__browser_type",
      "mcp__playwright__browser_console_messages",
      "Bash(git rebase:*)",
      "Bash(lsof:*)",
      "mcp__playwright__browser_evaluate",
      "mcp__playwright__browser_press_key",
      "Bash(psql postgresql://postgres:postgres@127.0.0.1:54322/postgres)",
      "Bash(supabase db reset --local)",
      "mcp__chrome-devtools__list_pages",
      "mcp__chrome-devtools__navigate_page",
      "mcp__chrome-devtools__take_snapshot",
      "mcp__chrome-devtools__click",
      "mcp__chrome-devtools__wait_for",
      "mcp__chrome-devtools__take_screenshot",
      "mcp__chrome-devtools__list_console_messages",
      "Bash(xargs kill -9)",
      "mcp__chrome-devtools__new_page",
      "mcp__chrome-devtools__select_page",
      "mcp__chrome-devtools__evaluate_script",
      "Bash(npx shadcn@latest add:*)",
      "Bash(npx tsc:*)",
      "Bash(test:*)",
      "Bash(npm run lint)",
      "Bash(npm test:*)",
      "Bash(tree:*)",
      "Bash(npm run lint:*)",
      "Bash(xargs:*)",
      "Bash(find:*)",
      "Bash(npx next lint:*)",
      "Bash(curl:*)",
      "Bash(npx eslint:*)",
      "Bash(npx prettier:*)",
      "Bash(do echo \"=== $file ===\")",
      "Bash(head:*)",
      "Bash(npm run format:fix:*)",
      "Bash(npm run format:*)",
      "Bash(./replace-icons.sh)",
      "Bash(tee:*)",
      "Bash(./fix-icon-names.sh:*)",
      "Bash(./fix-all-icons.sh:*)",
      "Bash(npx supabase db push:*)",
      "Bash(npm run dev)",
      "SlashCommand(/do-parallel)",
      "SlashCommand(/implement)",
      "Bash(.specify/scripts/bash/check-prerequisites.sh:*)",
      "WebFetch(domain:sonner.emilkowal.ski)",
      "Bash(.specify/scripts/bash/create-new-feature.sh:*)",
      "Bash(.specify/scripts/bash/setup-plan.sh:*)",
      "Bash(.specify/scripts/bash/update-agent-context.sh:*)",
      "Bash(rm:*)",
      "Bash(npm run lint:fix:*)",
      "Bash(awk:*)",
      "mcp__chrome-devtools__fill",
      "mcp__supabase__search_docs",
      "WebFetch(domain:supabase.com)",
      "mcp__chrome-devtools__fill_form",
      "mcp__chrome-devtools__navigate_page_history",
      "mcp__supabase__get_logs",
      "mcp__playwright__browser_close",
      "Bash(npm run knip:*)",
      "Bash(npm uninstall:*)",
      "Bash(npm run test:run:*)",
      "Bash(psql:*)",
      "mcp__chrome-devtools__resize_page",
      "mcp__chrome-devtools__get_console_message",
      "Bash(git checkout:*)",
      "mcp__supabase__get_project_url",
      "SlashCommand(/make-pr)",
      "Bash(gh pr create --title \"Show ability modifiers only in encounter views\" --body \"$(cat <<''EOF''\n## Summary\n\nUpdated encounter detail views to display only ability score modifiers instead of both raw scores and modifiers, aligning with Shadowdark gameplay where only modifiers are used.\n\n## Changes\n\n- Created new `AbilityScoresCard` component for consistent modifier display\n- Updated `MonsterDetailPanel` to use `AbilityScoresCard` component\n- Updated `EncounterTableClient` inline display to show modifiers only\n- Renamed \"Ability Scores\" section to \"Modifiers\" for clarity\n- Added database migrations for ability modifiers columns\n- Updated TypeScript types and Zod validation schemas\n\n## Database Migrations\n\n- `20251027000001_add_ability_modifiers.sql` - Add modifier columns to monster tables\n- `20251027000002_populate_ability_modifiers.sql` - Populate modifiers from existing data\n\nNote: Migrations already applied to production database.\n\n## UI Improvements\n\nBefore: Displayed both raw scores (10-20) and modifiers (-5 to +5)\nAfter: Displays only modifiers with larger, clearer typography\n\n## Testing\n\n- Manual testing of monster detail pages\n- Manual testing of encounter table views\n- Verified modifier calculations in create-snapshot utility\n\nðŸ¤– Generated with [Claude Code](https://claude.com/claude-code)\nEOF\n)\")",
      "Bash(supabase status:*)",
      "Bash(supabase start:*)",
      "Bash(git log:*)",
      "mcp__supabase__get_advisors",
      "Bash(gh pr view:*)",
      "Bash(supabase migration repair:*)",
      "Bash(supabase migration:*)",
      "Bash(PGPASSWORD='FcJydq4!micNMNYYTf01YEE' psql \"postgresql://postgres.hvtkkugamifjglxkqsrc:FcJydq4!micNMNYYTf01YEE@aws-0-us-west-1.pooler.supabase.com:6543/postgres\" -c \"SELECT column_name FROM information_schema.columns WHERE table_name = ''official_monsters'' AND column_name LIKE ''%mod%'' ORDER BY ordinal_position;\")",
      "SlashCommand(/playwright-local)"
    ],
    "deny": [],
    "ask": []
  }
}
